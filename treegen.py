import argparse
from pathlib import Path

def generate_tree(directory, prefix='', output_file=None, ignore_list=None, max_depth=None, current_depth=None):
    if ignore_list is None:
        ignore_list = []

    directory = Path(directory) if isinstance(directory, str) else directory
    
    if not directory.exists() or not directory.is_dir():
        print('Error: The specified path is not valid directory.')
        return
    
    if max_depth  is not None and current_depth > max_depth:
        return
    
    try:

        items = sorted(list(directory.iterdir()), key=lambda x: (x.is_file(), x.name.lower()))

    except PermissionError:
        _output(f'{prefix} └─── [Premission Denied]', output_file)
        return
    
    for index, item in enumerate(items):
        is_last = index == len(items) - 1
        connector = '└── ' if is_last else '├── '

        line = prefix + connector + item.name
        _output(line, output_file)

        if item.is_dir():
            extention = '    ' if is_last else '│   '
            generate_tree(item,
                          prefix + extention,
                          output_file,
                          ignore_list,
                          current_depth + 1
            )

def _output(text, output_file):

    if output_file:
        with open(output_file, 'a', encoding='utf-8') as f:
            f.write(text + '\n')
    else:
        print(text)

def main():
    parser = argparse.ArgumentParser(
        description='Generate a directory tree structure',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
Examples:   
    treegen.py                             # Generate tree for current directory
    treegen.py -p src                      # Generate tree for "src" directory
    treegen.py -o tree.txt                 # Save tree to "tree.txt"
    treegen.py -ignore .git,__pycache__    # Ignore specified directories
    treegen.py --max-depth 2               # Limit traversal to 2 levels deep
        '''   
    )

    parser.add_argument(
        '-p', '--path',
        type=str,
        help='Directory path to generate tree for (default: current directory)'
    )

    parser.add_argument(
        '-o', '--output',
        type=str,
        help='Output file to save the tree (e.g., "tree.txt" or "STRUCTURE.md")'        
    )

    parser.add_argument(
        '--ignore',
        type=str,
        default='',
        help='Comma-separated list of file/directories to ignore (e.g., ".git,__pycache__")'
    )

    parser.add_argument(
        '--max-depth',
        type=int,
        help='Maximum depth to traverse (default: unlimited)'
    )

    parser.add_argument(
        '-v', '--version',
        action='version',
        version='Dir-Tree-Generator 1.0.0'
    )
    
    args = parser.parse_args()

    ignore_list = [item.strip() for item in args.ignore.split(',')] if args.ignore else []

    if args.output:
        with open(args.output, 'w', encoding='utf-8') as f:
            f.write(f'Directory Tree for: {args.path}\n')
            f.write('Generated by Dir-Tree-Generator\n')
            f.write('=' * 50 + '\n\n')

    generate_tree(
        directory=args.path,
        output_file=args.output,
        ignore_list=ignore_list,
        max_depth=args.max_depth
    )

    if args.output:
        print(f'Tree structure saved to: {args.output}')

if __name__ == '__main__':
    main()